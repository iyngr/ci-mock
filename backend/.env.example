# Backend Environment Variables - Phase 1 Configuration

# ===== Azure Cosmos DB Configuration =====
DATABASE_URL=mongodb://localhost:27017/assessment
COSMOS_DB_ENDPOINT=https://your-cosmos-account.documents.azure.com:443/
COSMOS_DB_KEY=your-cosmos-db-key
DATABASE_NAME=assessment-db

# ===== Azure OpenAI Configuration =====
AZURE_OPENAI_ENDPOINT=https://your-openai.openai.azure.com/
AZURE_OPENAI_API_KEY=your-api-key
AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4o-mini
AZURE_OPENAI_API_VERSION=2024-09-01-preview
AZURE_OPENAI_EMBED_DEPLOYMENT=text-embedding-3-small

# ===== LLM Agent Microservice Configuration (Phases 1, 2, 3) =====
# URL of the llm-agent service for Autogen multi-agent operations
# Phase 1: Background task orchestration
# Phase 2: Autogen scoring workflow
# Phase 3: Autogen report generation
LLM_AGENT_URL=http://localhost:8001

# Timeout in seconds for llm-agent service calls (default: 120)
# Phase 2: Autogen scoring workflows (10-30s typical)
# Phase 3: Report generation workflows (5-15s typical)
# Recommended: 120s for production to handle spikes
LLM_AGENT_TIMEOUT=120

# Maximum retry attempts for llm-agent calls (default: 3)
# Applies to both scoring and report generation requests
LLM_AGENT_MAX_RETRIES=3

# ===== Scoring Configuration (Phase 2) =====
# Enable Autogen multi-agent scoring (default: true)
# Set to false to use direct Azure OpenAI scoring (fallback mode)
USE_AUTOGEN_SCORING=true

# ===== Report Generation Configuration (Phase 3) =====
# Cosmos DB container for storing generated reports
# Container name: "reports"
# Partition key: /submission_id
# Note: Container must be created before Phase 3 activation

# ===== Azure Service Bus Configuration (Phase 4a - PLANNED) =====
# IMPORTANT: Implement Phase 4a AFTER successful E2E testing of Phases 1-3
# 
# Azure Resource Required:
# - Create Service Bus Namespace (Basic tier ~$0.05/month for 50-100 interviews/day)
# - Azure Portal: Create Resource → Service Bus → Basic tier
# - Resource name: e.g., "ci-mock-servicebus" or "assessment-queue"
# - Location: Same region as Cosmos DB for low latency
# 
# After creating namespace, create two queues:
# 1. "scoring-jobs" - For assessment scoring tasks
# 2. "report-jobs" - For report generation tasks
# 
# Configuration:
USE_SERVICE_BUS=false  # Set to true to enable Service Bus (false = use BackgroundTasks)

# Connection String (Get from Azure Portal → Service Bus → Shared access policies → RootManageSharedAccessKey)
# Format: Endpoint=sb://<namespace>.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=<key>
AZURE_SERVICE_BUS_CONNECTION_STRING=Endpoint=sb://your-namespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=your-key-here

# Queue Names (must match queues created in Azure Portal)
AZURE_SERVICE_BUS_SCORING_QUEUE=scoring-jobs
AZURE_SERVICE_BUS_REPORT_QUEUE=report-jobs

# Advanced Settings (Optional - use defaults)
AZURE_SERVICE_BUS_MAX_RETRIES=3  # Message delivery retry count
AZURE_SERVICE_BUS_RETRY_DELAY=60  # Seconds between retries
AZURE_SERVICE_BUS_MESSAGE_TTL=3600  # Message time-to-live in seconds (1 hour)

# Azure OpenAI Configuration for scoring service
USE_AZURE_OPENAI=true

# ===== Judge0 Code Execution Service =====
JUDGE0_API_URL=https://judge0-ce.p.rapidapi.com
JUDGE0_API_KEY=your-judge0-key

# ===== Production Safety Settings =====
# Disable all development fallbacks in production (default: true)
STRICT_MODE=true

# Minimum questions required before starting assessment (default: 1)
MIN_QUESTIONS_REQUIRED=1

# Allow assessment creation with 0 questions (default: false)
ALLOW_EMPTY_ASSESSMENTS=false

# ===== Auto-Submission Timer Settings =====
# Enable server-side auto-submission when timer expires (default: true)
AUTO_SUBMIT_ENABLED=true

# Grace period in seconds after expiration before forcing auto-submit (default: 30)
AUTO_SUBMIT_GRACE_PERIOD=30

# How often frontend should sync timer with backend in seconds (default: 60)
TIMER_SYNC_INTERVAL=60

# ===== Optional: RAG Database Configuration =====
# Separate serverless Cosmos DB for RAG vector search
RAG_COSMOS_DB_ENDPOINT=https://your-rag-cosmos.documents.azure.com:443/
RAG_COSMOS_DB_KEY=your-rag-cosmos-key
RAG_COSMOS_DB_DATABASE=rag-knowledge
RAG_COSMOS_CONTAINER=KnowledgeBase
